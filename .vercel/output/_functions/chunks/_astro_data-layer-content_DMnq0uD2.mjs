const _astro_dataLayerContent = [["Map",1,2,7,8],"meta::meta",["Map",3,4,5,6],"astro-version","5.5.3","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","blog",["Map",9,10,56,57,91,92],"web-development-best-practices",{id:9,data:11,body:17,filePath:18,digest:19,rendered:20,legacyId:55},{title:12,excerpt:13,date:14,image:15,category:16,slug:9},"Web Development Best Practices","Essential practices every web developer should follow for better code quality.","2024-01-10","https://images.unsplash.com/photo-1461749280684-dccba630e2f6?auto=format&fit=crop&q=80&w=800","Development","# Web Development Best Practices\n\nFollowing best practices in web development is crucial for maintaining high-quality, scalable applications.\n\n## 1. Code Organization\n\n### File Structure\nMaintain a clear and logical file structure:\n- Group related files together\n- Use consistent naming conventions\n- Keep components small and focused\n\n### Modular Code\nWrite modular, reusable code:\n- Break down complex functions\n- Use design patterns\n- Create reusable components\n\n## 2. Performance Optimization\n\n### Loading Speed\nOptimize your application's loading speed:\n- Minimize HTTP requests\n- Compress assets\n- Use lazy loading\n- Implement caching strategies\n\n### Resource Management\nManage resources efficiently:\n- Optimize images\n- Minify CSS and JavaScript\n- Use appropriate file formats\n\n## 3. Security\n\nAlways prioritize security:\n- Validate user input\n- Implement HTTPS\n- Use secure authentication\n- Regular security audits\n\n## 4. Testing\n\nImplement comprehensive testing:\n- Unit tests\n- Integration tests\n- End-to-end tests\n- Regular testing cycles\n\nRemember, following these practices will help you create better, more maintainable applications.","src/content/blog/web-development-best-practices.md","15f6c666a4949c03",{html:21,metadata:22},"<h1 id=\"web-development-best-practices\">Web Development Best Practices</h1>\n<p>Following best practices in web development is crucial for maintaining high-quality, scalable applications.</p>\n<h2 id=\"1-code-organization\">1. Code Organization</h2>\n<h3 id=\"file-structure\">File Structure</h3>\n<p>Maintain a clear and logical file structure:</p>\n<ul>\n<li>Group related files together</li>\n<li>Use consistent naming conventions</li>\n<li>Keep components small and focused</li>\n</ul>\n<h3 id=\"modular-code\">Modular Code</h3>\n<p>Write modular, reusable code:</p>\n<ul>\n<li>Break down complex functions</li>\n<li>Use design patterns</li>\n<li>Create reusable components</li>\n</ul>\n<h2 id=\"2-performance-optimization\">2. Performance Optimization</h2>\n<h3 id=\"loading-speed\">Loading Speed</h3>\n<p>Optimize your application’s loading speed:</p>\n<ul>\n<li>Minimize HTTP requests</li>\n<li>Compress assets</li>\n<li>Use lazy loading</li>\n<li>Implement caching strategies</li>\n</ul>\n<h3 id=\"resource-management\">Resource Management</h3>\n<p>Manage resources efficiently:</p>\n<ul>\n<li>Optimize images</li>\n<li>Minify CSS and JavaScript</li>\n<li>Use appropriate file formats</li>\n</ul>\n<h2 id=\"3-security\">3. Security</h2>\n<p>Always prioritize security:</p>\n<ul>\n<li>Validate user input</li>\n<li>Implement HTTPS</li>\n<li>Use secure authentication</li>\n<li>Regular security audits</li>\n</ul>\n<h2 id=\"4-testing\">4. Testing</h2>\n<p>Implement comprehensive testing:</p>\n<ul>\n<li>Unit tests</li>\n<li>Integration tests</li>\n<li>End-to-end tests</li>\n<li>Regular testing cycles</li>\n</ul>\n<p>Remember, following these practices will help you create better, more maintainable applications.</p>",{headings:23,localImagePaths:52,remoteImagePaths:53,frontmatter:11,imagePaths:54},[24,26,30,34,37,40,43,46,49],{depth:25,slug:9,text:12},1,{depth:27,slug:28,text:29},2,"1-code-organization","1. Code Organization",{depth:31,slug:32,text:33},3,"file-structure","File Structure",{depth:31,slug:35,text:36},"modular-code","Modular Code",{depth:27,slug:38,text:39},"2-performance-optimization","2. Performance Optimization",{depth:31,slug:41,text:42},"loading-speed","Loading Speed",{depth:31,slug:44,text:45},"resource-management","Resource Management",{depth:27,slug:47,text:48},"3-security","3. Security",{depth:27,slug:50,text:51},"4-testing","4. Testing",[],[],[],"web-development-best-practices.md","getting-started-with-angular",{id:56,data:58,body:64,filePath:65,digest:66,rendered:67,legacyId:90},{title:59,excerpt:60,date:61,image:62,category:63,slug:56},"Getting Started with Angular","Learn the basics of Angular and how to create your first application.","2024-01-15","https://images.unsplash.com/photo-1633356122544-f134324a6cee?auto=format&fit=crop&q=80&w=800","Programming","# Getting Started with Angular\n\nAngular is a powerful framework for building web applications. In this guide, we'll walk through the basics of setting up your first Angular project.\n\n## Prerequisites\n\nBefore we begin, make sure you have:\n- Node.js installed\n- npm (Node Package Manager)\n- Basic knowledge of TypeScript\n\n## Creating Your First Project\n\nTo create a new Angular project, run:\n\n```bash\nng new my-first-app\n```\n\nThis command will create a new directory with all the necessary files and dependencies.\n\n## Project Structure\n\nLet's look at the key files and directories in an Angular project:\n\n- `src/app`: Contains your application code\n- `src/assets`: For static files like images\n- `src/environments`: Configuration files\n\n## Components\n\nComponents are the building blocks of Angular applications. Here's a simple component:\n\n```typescript\n@Component({\n  selector: 'app-hello',\n  template: '<h1>Hello, {{name}}!</h1>'\n})\nexport class HelloComponent {\n  name = 'World';\n}\n```\n\n## Next Steps\n\nNow that you have your first Angular project set up, you can:\n1. Create more components\n2. Add routing\n3. Implement services\n4. Style your application\n\nStay tuned for more Angular tutorials!","src/content/blog/getting-started-with-angular.md","c50f6b22177686f7",{html:68,metadata:69},"<h1 id=\"getting-started-with-angular\">Getting Started with Angular</h1>\n<p>Angular is a powerful framework for building web applications. In this guide, we’ll walk through the basics of setting up your first Angular project.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Before we begin, make sure you have:</p>\n<ul>\n<li>Node.js installed</li>\n<li>npm (Node Package Manager)</li>\n<li>Basic knowledge of TypeScript</li>\n</ul>\n<h2 id=\"creating-your-first-project\">Creating Your First Project</h2>\n<p>To create a new Angular project, run:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">ng</span><span style=\"color:#9ECBFF\"> new</span><span style=\"color:#9ECBFF\"> my-first-app</span></span></code></pre>\n<p>This command will create a new directory with all the necessary files and dependencies.</p>\n<h2 id=\"project-structure\">Project Structure</h2>\n<p>Let’s look at the key files and directories in an Angular project:</p>\n<ul>\n<li><code>src/app</code>: Contains your application code</li>\n<li><code>src/assets</code>: For static files like images</li>\n<li><code>src/environments</code>: Configuration files</li>\n</ul>\n<h2 id=\"components\">Components</h2>\n<p>Components are the building blocks of Angular applications. Here’s a simple component:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">@</span><span style=\"color:#B392F0\">Component</span><span style=\"color:#E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  selector: </span><span style=\"color:#9ECBFF\">'app-hello'</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  template: </span><span style=\"color:#9ECBFF\">'&#x3C;h1>Hello, {{name}}!&#x3C;/h1>'</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">})</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">export</span><span style=\"color:#F97583\"> class</span><span style=\"color:#B392F0\"> HelloComponent</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  name</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> 'World'</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h2 id=\"next-steps\">Next Steps</h2>\n<p>Now that you have your first Angular project set up, you can:</p>\n<ol>\n<li>Create more components</li>\n<li>Add routing</li>\n<li>Implement services</li>\n<li>Style your application</li>\n</ol>\n<p>Stay tuned for more Angular tutorials!</p>",{headings:70,localImagePaths:87,remoteImagePaths:88,frontmatter:58,imagePaths:89},[71,72,75,78,81,84],{depth:25,slug:56,text:59},{depth:27,slug:73,text:74},"prerequisites","Prerequisites",{depth:27,slug:76,text:77},"creating-your-first-project","Creating Your First Project",{depth:27,slug:79,text:80},"project-structure","Project Structure",{depth:27,slug:82,text:83},"components","Components",{depth:27,slug:85,text:86},"next-steps","Next Steps",[],[],[],"getting-started-with-angular.md","mastering-typescript",{id:91,data:93,body:98,filePath:99,digest:100,rendered:101,legacyId:130},{title:94,excerpt:95,date:96,image:97,category:63,slug:91},"Mastering TypeScript","Deep dive into TypeScript features and advanced concepts.","2024-01-05","https://images.unsplash.com/photo-1516116216624-53e697fedbea?auto=format&fit=crop&q=80&w=800","# Mastering TypeScript\n\nTypeScript adds static typing to JavaScript, making it more powerful and maintainable.\n\n## Basic Types\n\nTypeScript provides several basic types:\n\n```typescript\nlet isDone: boolean = false;\nlet decimal: number = 6;\nlet color: string = \"blue\";\nlet list: number[] = [1, 2, 3];\n```\n\n## Interfaces\n\nInterfaces define contracts in your code:\n\n```typescript\ninterface User {\n  name: string;\n  age: number;\n  email?: string; // Optional property\n}\n\nfunction greet(user: User) {\n  return `Hello, ${user.name}!`;\n}\n```\n\n## Generics\n\nGenerics provide type safety with flexibility:\n\n```typescript\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\nlet output = identity<string>(\"myString\");\n```\n\n## Advanced Types\n\n### Union Types\n```typescript\ntype StringOrNumber = string | number;\n```\n\n### Intersection Types\n```typescript\ntype Employee = Person & { employeeId: number };\n```\n\n## Best Practices\n\n1. Use interfaces for object shapes\n2. Leverage type inference\n3. Avoid `any` type when possible\n4. Use strict mode\n\nKeep exploring TypeScript's features to write better, type-safe code!","src/content/blog/mastering-typescript.md","ff08112aa5e7e1a8",{html:102,metadata:103},"<h1 id=\"mastering-typescript\">Mastering TypeScript</h1>\n<p>TypeScript adds static typing to JavaScript, making it more powerful and maintainable.</p>\n<h2 id=\"basic-types\">Basic Types</h2>\n<p>TypeScript provides several basic types:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> isDone</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> boolean</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> false</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> decimal</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> 6</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> color</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#F97583\"> =</span><span style=\"color:#9ECBFF\"> \"blue\"</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> list</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">[] </span><span style=\"color:#F97583\">=</span><span style=\"color:#E1E4E8\"> [</span><span style=\"color:#79B8FF\">1</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">2</span><span style=\"color:#E1E4E8\">, </span><span style=\"color:#79B8FF\">3</span><span style=\"color:#E1E4E8\">];</span></span></code></pre>\n<h2 id=\"interfaces\">Interfaces</h2>\n<p>Interfaces define contracts in your code:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">interface</span><span style=\"color:#B392F0\"> User</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  name</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  age</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#FFAB70\">  email</span><span style=\"color:#F97583\">?:</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#6A737D\">// Optional property</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">function</span><span style=\"color:#B392F0\"> greet</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#FFAB70\">user</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> User</span><span style=\"color:#E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#9ECBFF\"> `Hello, ${</span><span style=\"color:#E1E4E8\">user</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">name</span><span style=\"color:#9ECBFF\">}!`</span><span style=\"color:#E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h2 id=\"generics\">Generics</h2>\n<p>Generics provide type safety with flexibility:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">function</span><span style=\"color:#B392F0\"> identity</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#B392F0\">T</span><span style=\"color:#E1E4E8\">>(</span><span style=\"color:#FFAB70\">arg</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> T</span><span style=\"color:#E1E4E8\">)</span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> T</span><span style=\"color:#E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  return</span><span style=\"color:#E1E4E8\"> arg;</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#F97583\">let</span><span style=\"color:#E1E4E8\"> output </span><span style=\"color:#F97583\">=</span><span style=\"color:#B392F0\"> identity</span><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#79B8FF\">string</span><span style=\"color:#E1E4E8\">>(</span><span style=\"color:#9ECBFF\">\"myString\"</span><span style=\"color:#E1E4E8\">);</span></span></code></pre>\n<h2 id=\"advanced-types\">Advanced Types</h2>\n<h3 id=\"union-types\">Union Types</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> StringOrNumber</span><span style=\"color:#F97583\"> =</span><span style=\"color:#79B8FF\"> string</span><span style=\"color:#F97583\"> |</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\">;</span></span></code></pre>\n<h3 id=\"intersection-types\">Intersection Types</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\"><code><span class=\"line\"><span style=\"color:#F97583\">type</span><span style=\"color:#B392F0\"> Employee</span><span style=\"color:#F97583\"> =</span><span style=\"color:#B392F0\"> Person</span><span style=\"color:#F97583\"> &#x26;</span><span style=\"color:#E1E4E8\"> { </span><span style=\"color:#FFAB70\">employeeId</span><span style=\"color:#F97583\">:</span><span style=\"color:#79B8FF\"> number</span><span style=\"color:#E1E4E8\"> };</span></span></code></pre>\n<h2 id=\"best-practices\">Best Practices</h2>\n<ol>\n<li>Use interfaces for object shapes</li>\n<li>Leverage type inference</li>\n<li>Avoid <code>any</code> type when possible</li>\n<li>Use strict mode</li>\n</ol>\n<p>Keep exploring TypeScript’s features to write better, type-safe code!</p>",{headings:104,localImagePaths:127,remoteImagePaths:128,frontmatter:93,imagePaths:129},[105,106,109,112,115,118,121,124],{depth:25,slug:91,text:94},{depth:27,slug:107,text:108},"basic-types","Basic Types",{depth:27,slug:110,text:111},"interfaces","Interfaces",{depth:27,slug:113,text:114},"generics","Generics",{depth:27,slug:116,text:117},"advanced-types","Advanced Types",{depth:31,slug:119,text:120},"union-types","Union Types",{depth:31,slug:122,text:123},"intersection-types","Intersection Types",{depth:27,slug:125,text:126},"best-practices","Best Practices",[],[],[],"mastering-typescript.md"];

export { _astro_dataLayerContent as default };
